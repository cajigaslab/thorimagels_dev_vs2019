; Script generated by the HM NIS Edit Script Wizard.
!include nsDialogs.nsh
!include LogicLib.nsh
!include "x64.nsh"

; HM NIS Edit Wizard helper defines
!define PRODUCT_PUBLISHER "Thorlabs"
!define /date VersionTIMESTAMP "%Y.%m%d"
!define PRODUCT_VERSION "${MAJOR_VERSION}.${MINOR_VERSION}.${VersionTIMESTAMP}${ATTEMPT_NUMBER}"
!define /date FolderTIMESTAMP "%Y_%m%d"
!define MAIN_FOLDER_NAME "${FOLDER_NAME}_${MAJOR_VERSION}_${MINOR_VERSION}_${FolderTIMESTAMP}${ATTEMPT_NUMBER}"
!define PRODUCT_WEB_SITE "https://www.thorlabs.com"
!define PRODUCT_DIR_REGKEY "Software\Microsoft\Windows\CurrentVersion\App Paths\${PRODUCT_NAME}Gen.exe"
!define PRODUCT_UNINST_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PRODUCT_NAME}_${MAJOR_VERSION}.${MINOR_VERSION}"
!define PRODUCT_UNINST_ROOT_KEY "HKLM"
!define PRODUCT_STARTMENU_REGVAL "NSIS:StartMenuDir"
!define PRODUCT_FOLDER_NAME "${PRODUCT_NAME} ${MAJOR_VERSION}.${MINOR_VERSION}"

SetCompressor /SOLID lzma

; MUI 1.67 compatible. 'Modern UI' is the Theme ------
!include "MUI.nsh"
!include "WinVer.nsh"
!include "WordFunc.nsh"
!insertmacro VersionCompare

; MUI Settings
!define MUI_ABORTWARNING
!define MUI_ICON "${NSISDIR}\Contrib\Graphics\Icons\modern-install.ico"
!define MUI_UNICON "${NSISDIR}\Contrib\Graphics\Icons\modern-uninstall.ico"

; Define the text for the Finish Page before inserting the macro of the Finish Page, this needs to stay here
!define FinishPageText "!insertmacro _FinishPageText"

!macro _FinishPageText
  Call _FinishPageTextFunc
!macroend

Function _FinishPageTextFunc
    StrCpy $8 "Thorlabs ${PRODUCT_FOLDER_NAME} has been installed on your computer. \r\n \r\nClick Finish to close Setup."
FunctionEnd

; Welcome page
!insertmacro MUI_PAGE_WELCOME
; License page
; !insertmacro MUI_PAGE_LICENSE "License.rtf"

; Components page
!insertmacro MUI_PAGE_COMPONENTS
; Directory page
!insertmacro MUI_PAGE_DIRECTORY
; Instfiles page
!insertmacro MUI_PAGE_INSTFILES
; Finish page
!define MUI_FINISHPAGE_RUN "$INSTDIR\${PRODUCT_NAME}Gen.exe"
!define MUI_FINISHPAGE_TEXT $8
!insertmacro MUI_PAGE_FINISH

; Uninstaller pages
!insertmacro MUI_UNPAGE_INSTFILES

; Language files
!insertmacro MUI_LANGUAGE "English"

; Reserve files
!insertmacro MUI_RESERVEFILE_INSTALLOPTIONS

; MUI end ------

Name "${PRODUCT_PUBLISHER} ${PRODUCT_NAME} ${MAJOR_VERSION}.${MINOR_VERSION}"
OutFile "Shipping\${MAIN_FOLDER_NAME}_Installer.exe"
InstallDir "$PROGRAMFILES64\Thorlabs\${PRODUCT_FOLDER_NAME}"
InstallDirRegKey HKLM "${PRODUCT_DIR_REGKEY}" ""
ShowInstDetails show
ShowUnInstDetails show

var dialog
var hwnd
var frequencySelection

Section "Application" SEC01
  SectionIn RO
    SetOverwrite try
    ; If the computer is running 64bit copy all files from Bessel Beam folder
    SetOutPath "$INSTDIR"
    ${If} ${RunningX64}
      File /r "Shipping\${MAIN_FOLDER_NAME}\*"
    ${EndIf}
    Delete "$INSTDIR\tmp.txt"
SectionEnd

Section -AdditionalIcons
  SetOutPath "$INSTDIR\" ;SetOutPath to the path where the shortcuts are going to 'Start In'
  CreateDirectory "$SMPROGRAMS\Thorlabs ${PRODUCT_FOLDER_NAME}"
  CreateShortCut "$SMPROGRAMS\Thorlabs ${PRODUCT_FOLDER_NAME}\${PRODUCT_NAME} ${MAJOR_VERSION}.${MINOR_VERSION}.lnk" "$INSTDIR\${PRODUCT_NAME}Gen.exe"
  CreateShortCut "$DESKTOP\${PRODUCT_NAME} ${MAJOR_VERSION}.${MINOR_VERSION}.lnk" "$INSTDIR\${PRODUCT_NAME}Gen.exe"
  WriteIniStr "$INSTDIR\${PRODUCT_PUBLISHER}.url" "InternetShortcut" "URL" "${PRODUCT_WEB_SITE}"
  CreateShortCut "$SMPROGRAMS\Thorlabs ${PRODUCT_FOLDER_NAME}\Website.lnk" "$INSTDIR\${PRODUCT_PUBLISHER}.url"
  CreateShortCut "$SMPROGRAMS\Thorlabs ${PRODUCT_FOLDER_NAME}\Uninstall.lnk" "$INSTDIR\uninst_${PRODUCT_NAME}_${MAJOR_VERSION}.${MINOR_VERSION}.exe"
SectionEnd

Section -Post
  SetOutPath $INSTDIR
  ; this packages the signed uninstaller
  WriteUninstaller "$INSTDIR\uninst_${PRODUCT_NAME}_${MAJOR_VERSION}.${MINOR_VERSION}.exe"
  WriteRegStr HKLM "${PRODUCT_DIR_REGKEY}" "" "$INSTDIR\${PRODUCT_NAME}Gen.exe"
  WriteRegStr HKLM "${PRODUCT_UNINST_KEY}" "DisplayName" "$(^Name)"
  WriteRegStr HKLM "${PRODUCT_UNINST_KEY}" "UninstallString" "$INSTDIR\uninst_${PRODUCT_NAME}_${MAJOR_VERSION}.${MINOR_VERSION}.exe"
  WriteRegStr HKLM "${PRODUCT_UNINST_KEY}" "InstallLocation" "$INSTDIR"
  WriteRegStr HKLM "${PRODUCT_UNINST_KEY}" "DisplayIcon" "$INSTDIR\${PRODUCT_NAME}Gen.exe"
  WriteRegStr HKLM "${PRODUCT_UNINST_KEY}" "DisplayVersion" "${PRODUCT_VERSION}"
  WriteRegStr HKLM "${PRODUCT_UNINST_KEY}" "URLInfoAbout" "${PRODUCT_WEB_SITE}"
  WriteRegStr HKLM "${PRODUCT_UNINST_KEY}" "Publisher" "${PRODUCT_PUBLISHER}"
  SetOutPath "$INSTDIR\" ;SetOutPath for the first run
SectionEnd

; Section descriptions
!insertmacro MUI_FUNCTION_DESCRIPTION_BEGIN
  !insertmacro MUI_DESCRIPTION_TEXT ${SEC01} "${PRODUCT_NAME} Application"
!insertmacro MUI_FUNCTION_DESCRIPTION_END

Function .onInit
  ;Check if the computer is running a 32 bit or 64 bit version of Windows
  ${If} ${RunningX64}
    ;Do nothing
  ${Else}
     MessageBox MB_OK|MB_ICONEXCLAMATION "Cannot install 64-bit version of ${PRODUCT_FOLDER_NAME} because you have 32-bit version of Windows installed"
	  Quit
  ${EndIf}
  ;Rewrite the default instdir for the installer, otherwise it will map to \Application by default
  StrCpy $INSTDIR "$PROGRAMFILES64\Thorlabs\${PRODUCT_FOLDER_NAME}"
  ReadRegStr $R0 HKLM "${PRODUCT_UNINST_KEY}" "UninstallString"
  ReadRegStr $R1 HKLM "${PRODUCT_UNINST_KEY}" "InstallLocation"
  ReadRegStr $R2 HKLM "${PRODUCT_UNINST_KEY}" "DisplayVersion"
  StrCmp $R0 "" done
  MessageBox MB_OKCANCEL|MB_ICONEXCLAMATION \
  "${PRODUCT_FOLDER_NAME} is already installed. $\n$\nClick `OK` to remove the \
  previous version or `Cancel` to cancel this upgrade." \
  IDOK checkVer
  Quit
  ;Check the version installed, compare it to the one user is trying to install
  checkVer:
   ${VersionCompare} $R2 ${PRODUCT_VERSION} $1 ;Version compare returns 0 if they are equal, 1 if version on the left is newer or 2 if version on the right is newer
   IntCmp $1 2 uninst
   IntCmp $1 0 uninst
    MessageBox MB_YESNO|MB_ICONQUESTION "A newer version $R2 seems to be already installed on your system.$\nWould you like to proceed with the installation of version ${PRODUCT_VERSION}?" \
        IDYES uninst
    Quit
  ;Run the uninstaller
  uninst:
    ExecWait '$R0 /S _?=$INSTDIR'
    RMDir /r "$R1"
    Delete "$R1\${PRODUCT_PUBLISHER}.url"
    Delete $R0
    RMDir $R1
  done:
FunctionEnd

Function un.onUninstSuccess
  HideWindow
  MessageBox MB_ICONINFORMATION|MB_OK "$(^Name) was successfully removed from your computer."
FunctionEnd

Function un.onInit
  MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 "Are you sure you want to completely remove $(^Name) and all of its components?" IDYES +2
  Abort
FunctionEnd

Section Uninstall
  Delete "$DESKTOP\${PRODUCT_NAME} ${MAJOR_VERSION}.${MINOR_VERSION}.lnk"
  Delete "$SMPROGRAMS\Thorlabs ${PRODUCT_FOLDER_NAME}\Uninstall.lnk"
  Delete "$SMPROGRAMS\Thorlabs ${PRODUCT_FOLDER_NAME}\Website.lnk"
  Delete "$SMPROGRAMS\Thorlabs ${PRODUCT_FOLDER_NAME}\${PRODUCT_NAME} ${MAJOR_VERSION}.${MINOR_VERSION}.lnk"
  RMDir "$SMPROGRAMS\Thorlabs ${PRODUCT_FOLDER_NAME}"

  RMDir /r "$INSTDIR"
  Delete "$INSTDIR\${PRODUCT_PUBLISHER}.url"
  Delete "$INSTDIR\uninst_${PRODUCT_NAME}_${MAJOR_VERSION}.${MINOR_VERSION}.exe"
  RMDir $INSTDIR

  DeleteRegKey HKLM "${PRODUCT_UNINST_KEY}"
  DeleteRegKey HKLM "${PRODUCT_DIR_REGKEY}"
  SetAutoClose true
SectionEnd

Function IsDotNetInstalled
  # Check if the user has the .NET Framework 4.8 installed on their system or not

  # Set up our Variables
  Var /GLOBAL dotNET48IsThere
  Var /GLOBAL dotNET_CMD_LINE
  Var /GLOBAL EXIT_CODE

  ReadRegDWORD $dotNET48IsThere HKLM "SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full" "Release"
  IntCmp $dotNET48IsThere 528049 is_equal is_less is_greater

  is_equal:
    Goto done_compare_not_needed
  is_greater:
    # Useful if, for example, Microsoft releases .NET 4.8 SP1
    # We want to be able to simply skip install since it's not
    # needed on this system
    Goto done_compare_not_needed
  is_less:
    Goto done_compare_needed

  done_compare_needed:
    #.NET Framework 4.8 install is *NEEDED*
    # Microsoft Download Center EXE:
    # Web Bootstrapper: https://dotnet.microsoft.com/download/dotnet-framework/thank-you/net48-web-installer
    # Full Download: https://dotnet.microsoft.com/download/dotnet-framework/thank-you/net48-offline-installer

    # Reboot Required with these Exit Codes:
    # 1641 or 3010
    # Command Line Switches:
    # /showrmui /passive /norestart
    # Silent Command Line Switches:
    # /q /norestart
    # Let's see if the user is doing a Silent install or not
    IfSilent is_quiet is_not_quiet
    is_quiet:
        StrCpy $dotNET_CMD_LINE "/q /norestart"
        Goto do_local_install
    is_not_quiet:
        StrCpy $dotNET_CMD_LINE "/showrmui /passive /norestart"
        Goto do_local_install
    ;LookForLocalFile:
        ;IfFileExists "$INSTDIR\Dependencies\ndp48-web.exe" do_local_install do_network_install
        do_local_install:
            # .NET Framework found on the local disk.  Use this copy
            ExecWait '"$INSTDIR\Dependencies\ndp48-web.exe" $dotNET_CMD_LINE' $EXIT_CODE ;if the .net is updated then this name needs to update also
            Goto is_reboot_requested
        # Now, let's Download the .NET
        ;do_network_install:
            ;Var /GLOBAL dotNetDidDownload
            ;NSISdl::download "http://go.microsoft.com/fwlink/?LinkId=225704" "$TEMP\dotNET45Web.exe" $dotNetDidDownload
            ;StrCmp $dotNetDidDownload success fail
            ;success:
                ;ExecWait '"$TEMP\dotNET45Web.exe" $dotNET_CMD_LINE' $EXIT_CODE
                ;Goto is_reboot_requested
            ;fail:
                ;MessageBox MB_OK|MB_ICONEXCLAMATION "Unable to download .NET Framework.  ${PRODUCT_NAME} will be installed, but will not function without the Framework!"
                ;Goto done_dotNET_function

            # $EXIT_CODE contains the return codes.  1641 and 3010 means a Reboot has been requested
         is_reboot_requested:
            ${If} $EXIT_CODE = 1641
            ${OrIf} $EXIT_CODE = 3010
                SetRebootFlag true
            ${EndIf}
  done_compare_not_needed:
    # Done dotNET Install
    DetailPrint  ".NET 4.8 or higher is installed."
    Goto done_dotNET_function
  #exit the function
  done_dotNET_function:
FunctionEnd

Function IsVSRedistInstalled
  ${If} ${RunningX64}
    ReadRegStr $R1 HKLM "SOFTWARE\Microsoft\DevDiv\VC\Servicing\14.0\RuntimeMinimum" "Version"
    ${VersionCompare} $R1 "14.26.28720" $1 ;Version compare returns 0 if they are equal, 1 if version on the left is newer or 2 if version on the right is newer. This is the version of Redist installed.
    ${If} $1 == "2"
        ExecWait "$INSTDIR\Driver\VC_redist.x64.exe /passive /norestart"
        SetRebootFlag true
     ${Else}
        DetailPrint "VisualStudio DLLs to the standard package (C++) 2015, 2017, 2019 x64 are installed."
     ${EndIf}
  ${Else}
  ;:TODO: need to work on this part
    ReadRegDword $R2 HKLM "SOFTWARE\Wow6432Node\Microsoft\VisualStudio\11.0\VC\Runtimes\x86" "Installed"
    ${If} $R2 != "1"
      ReadRegDword $R3 HKLM "SOFTWARE\Microsoft\VisualStudio\11.0\VC\Runtimes\x86" "Installed"
      ${If} $R3 != "1"
        ExecWait "$INSTDIR\Driver\vcredist_x86.exe /passive /norestart"
        SetRebootFlag true
      ${Else}
         DetailPrint "VisualStudio DLLs to the standard package (C++) 2012 x86 is installed."
     ${EndIf}
    ${Else}
      DetailPrint "VisualStudio DLLs to the standard package (C++) 2012 x86 is installed."
    ${EndIf}
  ${EndIf}
FunctionEnd