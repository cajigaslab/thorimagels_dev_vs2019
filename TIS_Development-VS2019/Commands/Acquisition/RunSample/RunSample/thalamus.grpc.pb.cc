// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: thalamus.proto

#include "thalamus.pb.h"
#include "thalamus.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace thalamus_grpc {

static const char* Thalamus_method_names[] = {
  "/thalamus_grpc.Thalamus/events",
  "/thalamus_grpc.Thalamus/log",
  "/thalamus_grpc.Thalamus/observable_bridge",
  "/thalamus_grpc.Thalamus/graph",
  "/thalamus_grpc.Thalamus/analog",
  "/thalamus_grpc.Thalamus/spectrogram",
  "/thalamus_grpc.Thalamus/channel_info",
  "/thalamus_grpc.Thalamus/xsens",
  "/thalamus_grpc.Thalamus/image",
  "/thalamus_grpc.Thalamus/eval",
  "/thalamus_grpc.Thalamus/get_type_name",
  "/thalamus_grpc.Thalamus/get_recommended_channels",
  "/thalamus_grpc.Thalamus/replay",
  "/thalamus_grpc.Thalamus/remote_node",
  "/thalamus_grpc.Thalamus/notification",
  "/thalamus_grpc.Thalamus/node_request",
  "/thalamus_grpc.Thalamus/inject_analog",
  "/thalamus_grpc.Thalamus/get_modalities",
  "/thalamus_grpc.Thalamus/ping",
  "/thalamus_grpc.Thalamus/inject_text",
};

std::unique_ptr< Thalamus::Stub> Thalamus::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Thalamus::Stub> stub(new Thalamus::Stub(channel, options));
  return stub;
}

Thalamus::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_events_(Thalamus_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_log_(Thalamus_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_observable_bridge_(Thalamus_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_graph_(Thalamus_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_analog_(Thalamus_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_spectrogram_(Thalamus_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_channel_info_(Thalamus_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_xsens_(Thalamus_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_image_(Thalamus_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_eval_(Thalamus_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_get_type_name_(Thalamus_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_recommended_channels_(Thalamus_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_replay_(Thalamus_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_remote_node_(Thalamus_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_notification_(Thalamus_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_node_request_(Thalamus_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_inject_analog_(Thalamus_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_get_modalities_(Thalamus_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ping_(Thalamus_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_inject_text_(Thalamus_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientWriter< ::thalamus_grpc::Event>* Thalamus::Stub::eventsRaw(::grpc::ClientContext* context, ::util_grpc::Empty* response) {
  return ::grpc::internal::ClientWriterFactory< ::thalamus_grpc::Event>::Create(channel_.get(), rpcmethod_events_, context, response);
}

void Thalamus::Stub::async::events(::grpc::ClientContext* context, ::util_grpc::Empty* response, ::grpc::ClientWriteReactor< ::thalamus_grpc::Event>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::thalamus_grpc::Event>::Create(stub_->channel_.get(), stub_->rpcmethod_events_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::thalamus_grpc::Event>* Thalamus::Stub::AsynceventsRaw(::grpc::ClientContext* context, ::util_grpc::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::thalamus_grpc::Event>::Create(channel_.get(), cq, rpcmethod_events_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::thalamus_grpc::Event>* Thalamus::Stub::PrepareAsynceventsRaw(::grpc::ClientContext* context, ::util_grpc::Empty* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::thalamus_grpc::Event>::Create(channel_.get(), cq, rpcmethod_events_, context, response, false, nullptr);
}

::grpc::ClientWriter< ::thalamus_grpc::Text>* Thalamus::Stub::logRaw(::grpc::ClientContext* context, ::util_grpc::Empty* response) {
  return ::grpc::internal::ClientWriterFactory< ::thalamus_grpc::Text>::Create(channel_.get(), rpcmethod_log_, context, response);
}

void Thalamus::Stub::async::log(::grpc::ClientContext* context, ::util_grpc::Empty* response, ::grpc::ClientWriteReactor< ::thalamus_grpc::Text>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::thalamus_grpc::Text>::Create(stub_->channel_.get(), stub_->rpcmethod_log_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::thalamus_grpc::Text>* Thalamus::Stub::AsynclogRaw(::grpc::ClientContext* context, ::util_grpc::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::thalamus_grpc::Text>::Create(channel_.get(), cq, rpcmethod_log_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::thalamus_grpc::Text>* Thalamus::Stub::PrepareAsynclogRaw(::grpc::ClientContext* context, ::util_grpc::Empty* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::thalamus_grpc::Text>::Create(channel_.get(), cq, rpcmethod_log_, context, response, false, nullptr);
}

::grpc::ClientReaderWriter< ::thalamus_grpc::ObservableChange, ::thalamus_grpc::ObservableChange>* Thalamus::Stub::observable_bridgeRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::thalamus_grpc::ObservableChange, ::thalamus_grpc::ObservableChange>::Create(channel_.get(), rpcmethod_observable_bridge_, context);
}

void Thalamus::Stub::async::observable_bridge(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::thalamus_grpc::ObservableChange,::thalamus_grpc::ObservableChange>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::thalamus_grpc::ObservableChange,::thalamus_grpc::ObservableChange>::Create(stub_->channel_.get(), stub_->rpcmethod_observable_bridge_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::thalamus_grpc::ObservableChange, ::thalamus_grpc::ObservableChange>* Thalamus::Stub::Asyncobservable_bridgeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::thalamus_grpc::ObservableChange, ::thalamus_grpc::ObservableChange>::Create(channel_.get(), cq, rpcmethod_observable_bridge_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::thalamus_grpc::ObservableChange, ::thalamus_grpc::ObservableChange>* Thalamus::Stub::PrepareAsyncobservable_bridgeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::thalamus_grpc::ObservableChange, ::thalamus_grpc::ObservableChange>::Create(channel_.get(), cq, rpcmethod_observable_bridge_, context, false, nullptr);
}

::grpc::ClientReader< ::thalamus_grpc::GraphResponse>* Thalamus::Stub::graphRaw(::grpc::ClientContext* context, const ::thalamus_grpc::GraphRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::thalamus_grpc::GraphResponse>::Create(channel_.get(), rpcmethod_graph_, context, request);
}

void Thalamus::Stub::async::graph(::grpc::ClientContext* context, const ::thalamus_grpc::GraphRequest* request, ::grpc::ClientReadReactor< ::thalamus_grpc::GraphResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::thalamus_grpc::GraphResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_graph_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::thalamus_grpc::GraphResponse>* Thalamus::Stub::AsyncgraphRaw(::grpc::ClientContext* context, const ::thalamus_grpc::GraphRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::thalamus_grpc::GraphResponse>::Create(channel_.get(), cq, rpcmethod_graph_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::thalamus_grpc::GraphResponse>* Thalamus::Stub::PrepareAsyncgraphRaw(::grpc::ClientContext* context, const ::thalamus_grpc::GraphRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::thalamus_grpc::GraphResponse>::Create(channel_.get(), cq, rpcmethod_graph_, context, request, false, nullptr);
}

::grpc::ClientReader< ::thalamus_grpc::AnalogResponse>* Thalamus::Stub::analogRaw(::grpc::ClientContext* context, const ::thalamus_grpc::AnalogRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::thalamus_grpc::AnalogResponse>::Create(channel_.get(), rpcmethod_analog_, context, request);
}

void Thalamus::Stub::async::analog(::grpc::ClientContext* context, const ::thalamus_grpc::AnalogRequest* request, ::grpc::ClientReadReactor< ::thalamus_grpc::AnalogResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::thalamus_grpc::AnalogResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_analog_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::thalamus_grpc::AnalogResponse>* Thalamus::Stub::AsyncanalogRaw(::grpc::ClientContext* context, const ::thalamus_grpc::AnalogRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::thalamus_grpc::AnalogResponse>::Create(channel_.get(), cq, rpcmethod_analog_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::thalamus_grpc::AnalogResponse>* Thalamus::Stub::PrepareAsyncanalogRaw(::grpc::ClientContext* context, const ::thalamus_grpc::AnalogRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::thalamus_grpc::AnalogResponse>::Create(channel_.get(), cq, rpcmethod_analog_, context, request, false, nullptr);
}

::grpc::ClientReader< ::thalamus_grpc::SpectrogramResponse>* Thalamus::Stub::spectrogramRaw(::grpc::ClientContext* context, const ::thalamus_grpc::SpectrogramRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::thalamus_grpc::SpectrogramResponse>::Create(channel_.get(), rpcmethod_spectrogram_, context, request);
}

void Thalamus::Stub::async::spectrogram(::grpc::ClientContext* context, const ::thalamus_grpc::SpectrogramRequest* request, ::grpc::ClientReadReactor< ::thalamus_grpc::SpectrogramResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::thalamus_grpc::SpectrogramResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_spectrogram_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::thalamus_grpc::SpectrogramResponse>* Thalamus::Stub::AsyncspectrogramRaw(::grpc::ClientContext* context, const ::thalamus_grpc::SpectrogramRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::thalamus_grpc::SpectrogramResponse>::Create(channel_.get(), cq, rpcmethod_spectrogram_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::thalamus_grpc::SpectrogramResponse>* Thalamus::Stub::PrepareAsyncspectrogramRaw(::grpc::ClientContext* context, const ::thalamus_grpc::SpectrogramRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::thalamus_grpc::SpectrogramResponse>::Create(channel_.get(), cq, rpcmethod_spectrogram_, context, request, false, nullptr);
}

::grpc::ClientReader< ::thalamus_grpc::AnalogResponse>* Thalamus::Stub::channel_infoRaw(::grpc::ClientContext* context, const ::thalamus_grpc::AnalogRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::thalamus_grpc::AnalogResponse>::Create(channel_.get(), rpcmethod_channel_info_, context, request);
}

void Thalamus::Stub::async::channel_info(::grpc::ClientContext* context, const ::thalamus_grpc::AnalogRequest* request, ::grpc::ClientReadReactor< ::thalamus_grpc::AnalogResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::thalamus_grpc::AnalogResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_channel_info_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::thalamus_grpc::AnalogResponse>* Thalamus::Stub::Asyncchannel_infoRaw(::grpc::ClientContext* context, const ::thalamus_grpc::AnalogRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::thalamus_grpc::AnalogResponse>::Create(channel_.get(), cq, rpcmethod_channel_info_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::thalamus_grpc::AnalogResponse>* Thalamus::Stub::PrepareAsyncchannel_infoRaw(::grpc::ClientContext* context, const ::thalamus_grpc::AnalogRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::thalamus_grpc::AnalogResponse>::Create(channel_.get(), cq, rpcmethod_channel_info_, context, request, false, nullptr);
}

::grpc::ClientReader< ::thalamus_grpc::XsensResponse>* Thalamus::Stub::xsensRaw(::grpc::ClientContext* context, const ::thalamus_grpc::NodeSelector& request) {
  return ::grpc::internal::ClientReaderFactory< ::thalamus_grpc::XsensResponse>::Create(channel_.get(), rpcmethod_xsens_, context, request);
}

void Thalamus::Stub::async::xsens(::grpc::ClientContext* context, const ::thalamus_grpc::NodeSelector* request, ::grpc::ClientReadReactor< ::thalamus_grpc::XsensResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::thalamus_grpc::XsensResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_xsens_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::thalamus_grpc::XsensResponse>* Thalamus::Stub::AsyncxsensRaw(::grpc::ClientContext* context, const ::thalamus_grpc::NodeSelector& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::thalamus_grpc::XsensResponse>::Create(channel_.get(), cq, rpcmethod_xsens_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::thalamus_grpc::XsensResponse>* Thalamus::Stub::PrepareAsyncxsensRaw(::grpc::ClientContext* context, const ::thalamus_grpc::NodeSelector& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::thalamus_grpc::XsensResponse>::Create(channel_.get(), cq, rpcmethod_xsens_, context, request, false, nullptr);
}

::grpc::ClientReader< ::thalamus_grpc::Image>* Thalamus::Stub::imageRaw(::grpc::ClientContext* context, const ::thalamus_grpc::ImageRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::thalamus_grpc::Image>::Create(channel_.get(), rpcmethod_image_, context, request);
}

void Thalamus::Stub::async::image(::grpc::ClientContext* context, const ::thalamus_grpc::ImageRequest* request, ::grpc::ClientReadReactor< ::thalamus_grpc::Image>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::thalamus_grpc::Image>::Create(stub_->channel_.get(), stub_->rpcmethod_image_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::thalamus_grpc::Image>* Thalamus::Stub::AsyncimageRaw(::grpc::ClientContext* context, const ::thalamus_grpc::ImageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::thalamus_grpc::Image>::Create(channel_.get(), cq, rpcmethod_image_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::thalamus_grpc::Image>* Thalamus::Stub::PrepareAsyncimageRaw(::grpc::ClientContext* context, const ::thalamus_grpc::ImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::thalamus_grpc::Image>::Create(channel_.get(), cq, rpcmethod_image_, context, request, false, nullptr);
}

::grpc::ClientReaderWriter< ::thalamus_grpc::EvalResponse, ::thalamus_grpc::EvalRequest>* Thalamus::Stub::evalRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::thalamus_grpc::EvalResponse, ::thalamus_grpc::EvalRequest>::Create(channel_.get(), rpcmethod_eval_, context);
}

void Thalamus::Stub::async::eval(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::thalamus_grpc::EvalResponse,::thalamus_grpc::EvalRequest>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::thalamus_grpc::EvalResponse,::thalamus_grpc::EvalRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_eval_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::thalamus_grpc::EvalResponse, ::thalamus_grpc::EvalRequest>* Thalamus::Stub::AsyncevalRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::thalamus_grpc::EvalResponse, ::thalamus_grpc::EvalRequest>::Create(channel_.get(), cq, rpcmethod_eval_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::thalamus_grpc::EvalResponse, ::thalamus_grpc::EvalRequest>* Thalamus::Stub::PrepareAsyncevalRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::thalamus_grpc::EvalResponse, ::thalamus_grpc::EvalRequest>::Create(channel_.get(), cq, rpcmethod_eval_, context, false, nullptr);
}

::grpc::Status Thalamus::Stub::get_type_name(::grpc::ClientContext* context, const ::thalamus_grpc::StringMessage& request, ::thalamus_grpc::StringMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::thalamus_grpc::StringMessage, ::thalamus_grpc::StringMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_type_name_, context, request, response);
}

void Thalamus::Stub::async::get_type_name(::grpc::ClientContext* context, const ::thalamus_grpc::StringMessage* request, ::thalamus_grpc::StringMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::thalamus_grpc::StringMessage, ::thalamus_grpc::StringMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_type_name_, context, request, response, std::move(f));
}

void Thalamus::Stub::async::get_type_name(::grpc::ClientContext* context, const ::thalamus_grpc::StringMessage* request, ::thalamus_grpc::StringMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_type_name_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::thalamus_grpc::StringMessage>* Thalamus::Stub::PrepareAsyncget_type_nameRaw(::grpc::ClientContext* context, const ::thalamus_grpc::StringMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::thalamus_grpc::StringMessage, ::thalamus_grpc::StringMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_type_name_, context, request);
}

::grpc::ClientAsyncResponseReader< ::thalamus_grpc::StringMessage>* Thalamus::Stub::Asyncget_type_nameRaw(::grpc::ClientContext* context, const ::thalamus_grpc::StringMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_type_nameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Thalamus::Stub::get_recommended_channels(::grpc::ClientContext* context, const ::thalamus_grpc::NodeSelector& request, ::thalamus_grpc::StringListMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::thalamus_grpc::NodeSelector, ::thalamus_grpc::StringListMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_recommended_channels_, context, request, response);
}

void Thalamus::Stub::async::get_recommended_channels(::grpc::ClientContext* context, const ::thalamus_grpc::NodeSelector* request, ::thalamus_grpc::StringListMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::thalamus_grpc::NodeSelector, ::thalamus_grpc::StringListMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_recommended_channels_, context, request, response, std::move(f));
}

void Thalamus::Stub::async::get_recommended_channels(::grpc::ClientContext* context, const ::thalamus_grpc::NodeSelector* request, ::thalamus_grpc::StringListMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_recommended_channels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::thalamus_grpc::StringListMessage>* Thalamus::Stub::PrepareAsyncget_recommended_channelsRaw(::grpc::ClientContext* context, const ::thalamus_grpc::NodeSelector& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::thalamus_grpc::StringListMessage, ::thalamus_grpc::NodeSelector, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_recommended_channels_, context, request);
}

::grpc::ClientAsyncResponseReader< ::thalamus_grpc::StringListMessage>* Thalamus::Stub::Asyncget_recommended_channelsRaw(::grpc::ClientContext* context, const ::thalamus_grpc::NodeSelector& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_recommended_channelsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Thalamus::Stub::replay(::grpc::ClientContext* context, const ::thalamus_grpc::ReplayRequest& request, ::util_grpc::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::thalamus_grpc::ReplayRequest, ::util_grpc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_replay_, context, request, response);
}

void Thalamus::Stub::async::replay(::grpc::ClientContext* context, const ::thalamus_grpc::ReplayRequest* request, ::util_grpc::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::thalamus_grpc::ReplayRequest, ::util_grpc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_replay_, context, request, response, std::move(f));
}

void Thalamus::Stub::async::replay(::grpc::ClientContext* context, const ::thalamus_grpc::ReplayRequest* request, ::util_grpc::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_replay_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::util_grpc::Empty>* Thalamus::Stub::PrepareAsyncreplayRaw(::grpc::ClientContext* context, const ::thalamus_grpc::ReplayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::util_grpc::Empty, ::thalamus_grpc::ReplayRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_replay_, context, request);
}

::grpc::ClientAsyncResponseReader< ::util_grpc::Empty>* Thalamus::Stub::AsyncreplayRaw(::grpc::ClientContext* context, const ::thalamus_grpc::ReplayRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncreplayRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::thalamus_grpc::RemoteNodeMessage, ::thalamus_grpc::RemoteNodeMessage>* Thalamus::Stub::remote_nodeRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::thalamus_grpc::RemoteNodeMessage, ::thalamus_grpc::RemoteNodeMessage>::Create(channel_.get(), rpcmethod_remote_node_, context);
}

void Thalamus::Stub::async::remote_node(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::thalamus_grpc::RemoteNodeMessage,::thalamus_grpc::RemoteNodeMessage>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::thalamus_grpc::RemoteNodeMessage,::thalamus_grpc::RemoteNodeMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_remote_node_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::thalamus_grpc::RemoteNodeMessage, ::thalamus_grpc::RemoteNodeMessage>* Thalamus::Stub::Asyncremote_nodeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::thalamus_grpc::RemoteNodeMessage, ::thalamus_grpc::RemoteNodeMessage>::Create(channel_.get(), cq, rpcmethod_remote_node_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::thalamus_grpc::RemoteNodeMessage, ::thalamus_grpc::RemoteNodeMessage>* Thalamus::Stub::PrepareAsyncremote_nodeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::thalamus_grpc::RemoteNodeMessage, ::thalamus_grpc::RemoteNodeMessage>::Create(channel_.get(), cq, rpcmethod_remote_node_, context, false, nullptr);
}

::grpc::ClientReader< ::thalamus_grpc::Notification>* Thalamus::Stub::notificationRaw(::grpc::ClientContext* context, const ::util_grpc::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::thalamus_grpc::Notification>::Create(channel_.get(), rpcmethod_notification_, context, request);
}

void Thalamus::Stub::async::notification(::grpc::ClientContext* context, const ::util_grpc::Empty* request, ::grpc::ClientReadReactor< ::thalamus_grpc::Notification>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::thalamus_grpc::Notification>::Create(stub_->channel_.get(), stub_->rpcmethod_notification_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::thalamus_grpc::Notification>* Thalamus::Stub::AsyncnotificationRaw(::grpc::ClientContext* context, const ::util_grpc::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::thalamus_grpc::Notification>::Create(channel_.get(), cq, rpcmethod_notification_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::thalamus_grpc::Notification>* Thalamus::Stub::PrepareAsyncnotificationRaw(::grpc::ClientContext* context, const ::util_grpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::thalamus_grpc::Notification>::Create(channel_.get(), cq, rpcmethod_notification_, context, request, false, nullptr);
}

::grpc::Status Thalamus::Stub::node_request(::grpc::ClientContext* context, const ::thalamus_grpc::NodeRequest& request, ::thalamus_grpc::NodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::thalamus_grpc::NodeRequest, ::thalamus_grpc::NodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_node_request_, context, request, response);
}

void Thalamus::Stub::async::node_request(::grpc::ClientContext* context, const ::thalamus_grpc::NodeRequest* request, ::thalamus_grpc::NodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::thalamus_grpc::NodeRequest, ::thalamus_grpc::NodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_node_request_, context, request, response, std::move(f));
}

void Thalamus::Stub::async::node_request(::grpc::ClientContext* context, const ::thalamus_grpc::NodeRequest* request, ::thalamus_grpc::NodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_node_request_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::thalamus_grpc::NodeResponse>* Thalamus::Stub::PrepareAsyncnode_requestRaw(::grpc::ClientContext* context, const ::thalamus_grpc::NodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::thalamus_grpc::NodeResponse, ::thalamus_grpc::NodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_node_request_, context, request);
}

::grpc::ClientAsyncResponseReader< ::thalamus_grpc::NodeResponse>* Thalamus::Stub::Asyncnode_requestRaw(::grpc::ClientContext* context, const ::thalamus_grpc::NodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncnode_requestRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::thalamus_grpc::InjectAnalogRequest>* Thalamus::Stub::inject_analogRaw(::grpc::ClientContext* context, ::util_grpc::Empty* response) {
  return ::grpc::internal::ClientWriterFactory< ::thalamus_grpc::InjectAnalogRequest>::Create(channel_.get(), rpcmethod_inject_analog_, context, response);
}

void Thalamus::Stub::async::inject_analog(::grpc::ClientContext* context, ::util_grpc::Empty* response, ::grpc::ClientWriteReactor< ::thalamus_grpc::InjectAnalogRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::thalamus_grpc::InjectAnalogRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_inject_analog_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::thalamus_grpc::InjectAnalogRequest>* Thalamus::Stub::Asyncinject_analogRaw(::grpc::ClientContext* context, ::util_grpc::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::thalamus_grpc::InjectAnalogRequest>::Create(channel_.get(), cq, rpcmethod_inject_analog_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::thalamus_grpc::InjectAnalogRequest>* Thalamus::Stub::PrepareAsyncinject_analogRaw(::grpc::ClientContext* context, ::util_grpc::Empty* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::thalamus_grpc::InjectAnalogRequest>::Create(channel_.get(), cq, rpcmethod_inject_analog_, context, response, false, nullptr);
}

::grpc::Status Thalamus::Stub::get_modalities(::grpc::ClientContext* context, const ::thalamus_grpc::NodeSelector& request, ::thalamus_grpc::ModalitiesMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::thalamus_grpc::NodeSelector, ::thalamus_grpc::ModalitiesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_modalities_, context, request, response);
}

void Thalamus::Stub::async::get_modalities(::grpc::ClientContext* context, const ::thalamus_grpc::NodeSelector* request, ::thalamus_grpc::ModalitiesMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::thalamus_grpc::NodeSelector, ::thalamus_grpc::ModalitiesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_modalities_, context, request, response, std::move(f));
}

void Thalamus::Stub::async::get_modalities(::grpc::ClientContext* context, const ::thalamus_grpc::NodeSelector* request, ::thalamus_grpc::ModalitiesMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_modalities_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::thalamus_grpc::ModalitiesMessage>* Thalamus::Stub::PrepareAsyncget_modalitiesRaw(::grpc::ClientContext* context, const ::thalamus_grpc::NodeSelector& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::thalamus_grpc::ModalitiesMessage, ::thalamus_grpc::NodeSelector, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_modalities_, context, request);
}

::grpc::ClientAsyncResponseReader< ::thalamus_grpc::ModalitiesMessage>* Thalamus::Stub::Asyncget_modalitiesRaw(::grpc::ClientContext* context, const ::thalamus_grpc::NodeSelector& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_modalitiesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::thalamus_grpc::Ping, ::thalamus_grpc::Pong>* Thalamus::Stub::pingRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::thalamus_grpc::Ping, ::thalamus_grpc::Pong>::Create(channel_.get(), rpcmethod_ping_, context);
}

void Thalamus::Stub::async::ping(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::thalamus_grpc::Ping,::thalamus_grpc::Pong>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::thalamus_grpc::Ping,::thalamus_grpc::Pong>::Create(stub_->channel_.get(), stub_->rpcmethod_ping_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::thalamus_grpc::Ping, ::thalamus_grpc::Pong>* Thalamus::Stub::AsyncpingRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::thalamus_grpc::Ping, ::thalamus_grpc::Pong>::Create(channel_.get(), cq, rpcmethod_ping_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::thalamus_grpc::Ping, ::thalamus_grpc::Pong>* Thalamus::Stub::PrepareAsyncpingRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::thalamus_grpc::Ping, ::thalamus_grpc::Pong>::Create(channel_.get(), cq, rpcmethod_ping_, context, false, nullptr);
}

::grpc::ClientReaderWriter< ::thalamus_grpc::InjectTextRequest, ::thalamus_grpc::Pong>* Thalamus::Stub::inject_textRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::thalamus_grpc::InjectTextRequest, ::thalamus_grpc::Pong>::Create(channel_.get(), rpcmethod_inject_text_, context);
}

void Thalamus::Stub::async::inject_text(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::thalamus_grpc::InjectTextRequest,::thalamus_grpc::Pong>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::thalamus_grpc::InjectTextRequest,::thalamus_grpc::Pong>::Create(stub_->channel_.get(), stub_->rpcmethod_inject_text_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::thalamus_grpc::InjectTextRequest, ::thalamus_grpc::Pong>* Thalamus::Stub::Asyncinject_textRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::thalamus_grpc::InjectTextRequest, ::thalamus_grpc::Pong>::Create(channel_.get(), cq, rpcmethod_inject_text_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::thalamus_grpc::InjectTextRequest, ::thalamus_grpc::Pong>* Thalamus::Stub::PrepareAsyncinject_textRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::thalamus_grpc::InjectTextRequest, ::thalamus_grpc::Pong>::Create(channel_.get(), cq, rpcmethod_inject_text_, context, false, nullptr);
}

Thalamus::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Thalamus_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Thalamus::Service, ::thalamus_grpc::Event, ::util_grpc::Empty>(
          [](Thalamus::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::thalamus_grpc::Event>* reader,
             ::util_grpc::Empty* resp) {
               return service->events(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Thalamus_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Thalamus::Service, ::thalamus_grpc::Text, ::util_grpc::Empty>(
          [](Thalamus::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::thalamus_grpc::Text>* reader,
             ::util_grpc::Empty* resp) {
               return service->log(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Thalamus_method_names[2],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Thalamus::Service, ::thalamus_grpc::ObservableChange, ::thalamus_grpc::ObservableChange>(
          [](Thalamus::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::thalamus_grpc::ObservableChange,
             ::thalamus_grpc::ObservableChange>* stream) {
               return service->observable_bridge(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Thalamus_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Thalamus::Service, ::thalamus_grpc::GraphRequest, ::thalamus_grpc::GraphResponse>(
          [](Thalamus::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thalamus_grpc::GraphRequest* req,
             ::grpc::ServerWriter<::thalamus_grpc::GraphResponse>* writer) {
               return service->graph(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Thalamus_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Thalamus::Service, ::thalamus_grpc::AnalogRequest, ::thalamus_grpc::AnalogResponse>(
          [](Thalamus::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thalamus_grpc::AnalogRequest* req,
             ::grpc::ServerWriter<::thalamus_grpc::AnalogResponse>* writer) {
               return service->analog(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Thalamus_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Thalamus::Service, ::thalamus_grpc::SpectrogramRequest, ::thalamus_grpc::SpectrogramResponse>(
          [](Thalamus::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thalamus_grpc::SpectrogramRequest* req,
             ::grpc::ServerWriter<::thalamus_grpc::SpectrogramResponse>* writer) {
               return service->spectrogram(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Thalamus_method_names[6],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Thalamus::Service, ::thalamus_grpc::AnalogRequest, ::thalamus_grpc::AnalogResponse>(
          [](Thalamus::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thalamus_grpc::AnalogRequest* req,
             ::grpc::ServerWriter<::thalamus_grpc::AnalogResponse>* writer) {
               return service->channel_info(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Thalamus_method_names[7],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Thalamus::Service, ::thalamus_grpc::NodeSelector, ::thalamus_grpc::XsensResponse>(
          [](Thalamus::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thalamus_grpc::NodeSelector* req,
             ::grpc::ServerWriter<::thalamus_grpc::XsensResponse>* writer) {
               return service->xsens(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Thalamus_method_names[8],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Thalamus::Service, ::thalamus_grpc::ImageRequest, ::thalamus_grpc::Image>(
          [](Thalamus::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thalamus_grpc::ImageRequest* req,
             ::grpc::ServerWriter<::thalamus_grpc::Image>* writer) {
               return service->image(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Thalamus_method_names[9],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Thalamus::Service, ::thalamus_grpc::EvalResponse, ::thalamus_grpc::EvalRequest>(
          [](Thalamus::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::thalamus_grpc::EvalRequest,
             ::thalamus_grpc::EvalResponse>* stream) {
               return service->eval(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Thalamus_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Thalamus::Service, ::thalamus_grpc::StringMessage, ::thalamus_grpc::StringMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Thalamus::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thalamus_grpc::StringMessage* req,
             ::thalamus_grpc::StringMessage* resp) {
               return service->get_type_name(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Thalamus_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Thalamus::Service, ::thalamus_grpc::NodeSelector, ::thalamus_grpc::StringListMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Thalamus::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thalamus_grpc::NodeSelector* req,
             ::thalamus_grpc::StringListMessage* resp) {
               return service->get_recommended_channels(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Thalamus_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Thalamus::Service, ::thalamus_grpc::ReplayRequest, ::util_grpc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Thalamus::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thalamus_grpc::ReplayRequest* req,
             ::util_grpc::Empty* resp) {
               return service->replay(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Thalamus_method_names[13],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Thalamus::Service, ::thalamus_grpc::RemoteNodeMessage, ::thalamus_grpc::RemoteNodeMessage>(
          [](Thalamus::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::thalamus_grpc::RemoteNodeMessage,
             ::thalamus_grpc::RemoteNodeMessage>* stream) {
               return service->remote_node(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Thalamus_method_names[14],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Thalamus::Service, ::util_grpc::Empty, ::thalamus_grpc::Notification>(
          [](Thalamus::Service* service,
             ::grpc::ServerContext* ctx,
             const ::util_grpc::Empty* req,
             ::grpc::ServerWriter<::thalamus_grpc::Notification>* writer) {
               return service->notification(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Thalamus_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Thalamus::Service, ::thalamus_grpc::NodeRequest, ::thalamus_grpc::NodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Thalamus::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thalamus_grpc::NodeRequest* req,
             ::thalamus_grpc::NodeResponse* resp) {
               return service->node_request(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Thalamus_method_names[16],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Thalamus::Service, ::thalamus_grpc::InjectAnalogRequest, ::util_grpc::Empty>(
          [](Thalamus::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::thalamus_grpc::InjectAnalogRequest>* reader,
             ::util_grpc::Empty* resp) {
               return service->inject_analog(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Thalamus_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Thalamus::Service, ::thalamus_grpc::NodeSelector, ::thalamus_grpc::ModalitiesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Thalamus::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thalamus_grpc::NodeSelector* req,
             ::thalamus_grpc::ModalitiesMessage* resp) {
               return service->get_modalities(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Thalamus_method_names[18],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Thalamus::Service, ::thalamus_grpc::Ping, ::thalamus_grpc::Pong>(
          [](Thalamus::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::thalamus_grpc::Pong,
             ::thalamus_grpc::Ping>* stream) {
               return service->ping(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Thalamus_method_names[19],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Thalamus::Service, ::thalamus_grpc::InjectTextRequest, ::thalamus_grpc::Pong>(
          [](Thalamus::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::thalamus_grpc::Pong,
             ::thalamus_grpc::InjectTextRequest>* stream) {
               return service->inject_text(ctx, stream);
             }, this)));
}

Thalamus::Service::~Service() {
}

::grpc::Status Thalamus::Service::events(::grpc::ServerContext* context, ::grpc::ServerReader< ::thalamus_grpc::Event>* reader, ::util_grpc::Empty* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Thalamus::Service::log(::grpc::ServerContext* context, ::grpc::ServerReader< ::thalamus_grpc::Text>* reader, ::util_grpc::Empty* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Thalamus::Service::observable_bridge(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::thalamus_grpc::ObservableChange, ::thalamus_grpc::ObservableChange>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Thalamus::Service::graph(::grpc::ServerContext* context, const ::thalamus_grpc::GraphRequest* request, ::grpc::ServerWriter< ::thalamus_grpc::GraphResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Thalamus::Service::analog(::grpc::ServerContext* context, const ::thalamus_grpc::AnalogRequest* request, ::grpc::ServerWriter< ::thalamus_grpc::AnalogResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Thalamus::Service::spectrogram(::grpc::ServerContext* context, const ::thalamus_grpc::SpectrogramRequest* request, ::grpc::ServerWriter< ::thalamus_grpc::SpectrogramResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Thalamus::Service::channel_info(::grpc::ServerContext* context, const ::thalamus_grpc::AnalogRequest* request, ::grpc::ServerWriter< ::thalamus_grpc::AnalogResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Thalamus::Service::xsens(::grpc::ServerContext* context, const ::thalamus_grpc::NodeSelector* request, ::grpc::ServerWriter< ::thalamus_grpc::XsensResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Thalamus::Service::image(::grpc::ServerContext* context, const ::thalamus_grpc::ImageRequest* request, ::grpc::ServerWriter< ::thalamus_grpc::Image>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Thalamus::Service::eval(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::thalamus_grpc::EvalRequest, ::thalamus_grpc::EvalResponse>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Thalamus::Service::get_type_name(::grpc::ServerContext* context, const ::thalamus_grpc::StringMessage* request, ::thalamus_grpc::StringMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Thalamus::Service::get_recommended_channels(::grpc::ServerContext* context, const ::thalamus_grpc::NodeSelector* request, ::thalamus_grpc::StringListMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Thalamus::Service::replay(::grpc::ServerContext* context, const ::thalamus_grpc::ReplayRequest* request, ::util_grpc::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Thalamus::Service::remote_node(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::thalamus_grpc::RemoteNodeMessage, ::thalamus_grpc::RemoteNodeMessage>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Thalamus::Service::notification(::grpc::ServerContext* context, const ::util_grpc::Empty* request, ::grpc::ServerWriter< ::thalamus_grpc::Notification>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Thalamus::Service::node_request(::grpc::ServerContext* context, const ::thalamus_grpc::NodeRequest* request, ::thalamus_grpc::NodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Thalamus::Service::inject_analog(::grpc::ServerContext* context, ::grpc::ServerReader< ::thalamus_grpc::InjectAnalogRequest>* reader, ::util_grpc::Empty* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Thalamus::Service::get_modalities(::grpc::ServerContext* context, const ::thalamus_grpc::NodeSelector* request, ::thalamus_grpc::ModalitiesMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Thalamus::Service::ping(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::thalamus_grpc::Pong, ::thalamus_grpc::Ping>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Thalamus::Service::inject_text(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::thalamus_grpc::Pong, ::thalamus_grpc::InjectTextRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace thalamus_grpc

