; Script generated by the HM NIS Edit Script Wizard.
!include "x64.nsh"
!include nsDialogs.nsh
!include LogicLib.nsh
!include "sections.nsh"
!include "FileFunc.nsh"
  
; HM NIS Edit Wizard helper defines
!define PRODUCT_NAME "ThorSync ${MAJOR_VERSION}"
!define /date VersionTIMESTAMP "%Y.%m%d"
!define PRODUCT_VERSION "${MAJOR_VERSION}.${VersionTIMESTAMP}${ATTEMPT_NUMBER}"
!define PRODUCT_PUBLISHER "Thorlabs, Inc."
!define PRODUCT_WEB_SITE "https://www.thorlabs.com"
!define PRODUCT_DIR_REGKEY "Software\Microsoft\Windows\CurrentVersion\App Paths\${PRODUCT_NAME}.exe"
!define PRODUCT_UNINST_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PRODUCT_NAME}"
!define PRODUCT_UNINST_ROOT_KEY "HKLM"
!define MUI_COMPONENTSPAGE_SMALLDESC

; MUI 1.67 compatible ------
!include "MUI.nsh"
!include "WinVer.nsh"
!include "WordFunc.nsh"
!insertmacro VersionCompare

; MUI Settings
!define MUI_ABORTWARNING
!define MUI_ICON ".\..\..\..\GUI\Applications\ThorSync\ThorSync\ThorSync.ico"
!define MUI_UNICON ".\..\..\..\GUI\Styles\newdog_main_unleashed_green_icon.ico"

var _modifyMode
var _upgradeMode

;call Function skipOnModify if we are modifying the install
!define MUI_PAGE_CUSTOMFUNCTION_PRE skipOnModify 
; Welcome page
!insertmacro MUI_PAGE_WELCOME
; License page
!define MUI_PAGE_CUSTOMFUNCTION_PRE skipOnModify
!insertmacro MUI_PAGE_LICENSE "License.rtf"
; Directory page
!define MUI_PAGE_CUSTOMFUNCTION_PRE skipOnModify
!insertmacro MUI_PAGE_DIRECTORY
; Instfiles page
!define MUI_PAGE_CUSTOMFUNCTION_PRE deleteFilesOnModify
!insertmacro MUI_PAGE_INSTFILES
; Finish page
!define MUI_FINISHPAGE_RUN "$INSTDIR\ThorSync.exe"
!insertmacro MUI_PAGE_FINISH

; Uninstaller pages
!insertmacro MUI_UNPAGE_INSTFILES

; Language files
!insertmacro MUI_LANGUAGE "English"
; MUI end ------

Name "${PRODUCT_NAME}"
OutFile "ThorSync ${PRODUCT_VERSION} Setup.exe"
InstallDir "$PROGRAMFILES64\Thorlabs\${PRODUCT_NAME}"
InstallDirRegKey HKLM "${PRODUCT_DIR_REGKEY}" ""
ShowInstDetails show
ShowUnInstDetails show

;------------------ Main Folder --------------------------
Section "" CORE_FILES
  SectionIn RO
  SetOverwrite off
  SetOutPath "$INSTDIR"
  File /r "..\..\ThorSync\ThorSync\InputRelease\*"
  
  SetOutPath "$INSTDIR\Dependencies"
  File ".\ndp48-web.exe"
  File ".\VC_redist.x64.exe"
  CopyFiles "$ExePath" "$INSTDIR\Dependencies"
  SetFileAttributes "$INSTDIR\Dependencies" HIDDEN

  ;--------------------- Start and Desktop Shortcuts ------------------------------
  SetOutPath "$INSTDIR"
  CreateDirectory "$SMPROGRAMS\${PRODUCT_NAME}"
  CreateShortCut "$SMPROGRAMS\${PRODUCT_NAME}\${PRODUCT_NAME}.lnk" "$INSTDIR\ThorSync.exe"
  CreateShortCut "$DESKTOP\${PRODUCT_NAME}.lnk" "$INSTDIR\ThorSync.exe"
  
  ; Grant FullAccess permission for all users to the Program Files folder
  AccessControl::GrantOnFile  "$INSTDIR" "(S-1-5-32-545)" "FullAccess"
  
  Call IsDotNetInstalled
  Call IsVSRedistInstalled
SectionEnd

;--------------------------- Post installation Setup ------------------------------------
Section -AdditionalIcons
  SetOutPath "$INSTDIR"
  WriteIniStr "$INSTDIR\${PRODUCT_NAME}.url" "InternetShortcut" "URL" "${PRODUCT_WEB_SITE}"
  CreateShortCut "$SMPROGRAMS\${PRODUCT_NAME}\Website.lnk" "$INSTDIR\${PRODUCT_NAME}.url"
SectionEnd

; Create uninstaller and set Register keys for uninstaller
Section -Post
  WriteUninstaller "$INSTDIR\ThorSync-Uninstaller.exe"
    WriteRegStr HKLM "${PRODUCT_DIR_REGKEY}" "" "$INSTDIR\ThorSync.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayName" "${PRODUCT_NAME}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "UninstallString" "$INSTDIR\ThorSync-Uninstaller.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayIcon" "$INSTDIR\ThorSync.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayVersion" "${PRODUCT_VERSION}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "URLInfoAbout" "${PRODUCT_WEB_SITE}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "Publisher" "${PRODUCT_PUBLISHER}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "InstallLocation" "$INSTDIR"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "ModifyPath" "$INSTDIR\Dependencies\ThorSync ${PRODUCT_VERSION} Setup.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "MajorVersion" "${MAJOR_VERSION}"
  ;Estimate the size of the install for the Add/Remove Programs details
  ${GetSize} "$INSTDIR" "/S=0K" $0 $1 $2
  IntOp $4 $0 + $4
  IntFmt $4 "0x%08X" $4
  WriteRegDWORD ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "EstimatedSize" "$4"
  CreateShortCut "$SMPROGRAMS\${PRODUCT_NAME}\Uninstall.lnk" "$INSTDIR\ThorSync-Uninstaller.exe"
SectionEnd

; Section descriptions
!insertmacro MUI_FUNCTION_DESCRIPTION_BEGIN
!insertmacro MUI_FUNCTION_DESCRIPTION_END

Function un.onUninstSuccess
  HideWindow
  MessageBox MB_ICONINFORMATION|MB_OK "$(^Name) was successfully removed from your computer."
FunctionEnd

Function un.onInit
  MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 "Are you sure you want to completely remove $(^Name) and all of its components?" IDYES +2
  Abort
  FindWindow $R0 "" "ThorSync"
  IsWindow $R0 0 +3
  MessageBox MB_OK|MB_ICONEXCLAMATION "ThorSync is running. Please close it first" /SD IDOK
  Abort
FunctionEnd

; Uninstaller commands
Section Uninstall
  SetRegView 64 ;Set the Register to write to 64bit register
  Delete "$SMPROGRAMS\${PRODUCT_NAME}\Uninstall.lnk"
  Delete "$SMPROGRAMS\${PRODUCT_NAME}\Website.lnk"
  Delete "$DESKTOP\${PRODUCT_NAME}.lnk"
  Delete "$SMPROGRAMS\${PRODUCT_NAME}\${PRODUCT_NAME}.lnk"

  RMDir "$SMPROGRAMS\${PRODUCT_NAME}"
  RMDir /r "$INSTDIR\MatlabScripts"
  RMDir /r "$INSTDIR\Modules_Native"
  RMDir /r "$INSTDIR\OTM"
  Delete "$INSTDIR\*.exe"
  Delete "$INSTDIR\*.dll"
  Delete "$INSTDIR\*.config"
  Delete "$INSTDIR\Abt.Controls.SciChart.Wpf.xml"
  
  MessageBox MB_YESNO|MB_ICONQUESTION "Do you want to remove all user folders and files (Documents folder, calibrations and xmls)?" IDNO skipDeleteAllFiles
  MessageBox MB_YESNO|MB_ICONQUESTION "Are you sure you want to delete all settings files?" IDNO skipDeleteAllFiles
  RMDir /r "$INSTDIR"
  
  skipDeleteAllFiles:
  DeleteRegKey ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}"
  SetAutoClose true
SectionEnd
;-------------------------------------------------------------------------------------------------

;-------------------------------- Functions ------------------------------------------------------
var backupLocation
var backupVersion
Function .onInit
  ;Check if the computer is running a 32 bit or 64 bit version of Windows
  ${If} ${RunningX64}
    ;Do nothing
    SetRegView 64 ;Set the Register to write to 64bit register
  ${Else}
     MessageBox MB_OK|MB_ICONEXCLAMATION "Cannot install 64-bit version of ${PRODUCT_NAME} because you have 32-bit version of Windows installed"
     Quit
  ${EndIf}
  ;Check if ThorSync is running -----
  FindWindow $R0 "" "ThorSync"
  IsWindow $R0 0 +3
  MessageBox MB_OK|MB_ICONEXCLAMATION "ThorSync is running. Please close it first" /SD IDOK
  Quit
  ;-----------------------------------------------
  StrCpy $_modifyMode "0"
  StrCpy $_upgradeMode "0"
  ReadRegStr $R0 ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "UninstallString"
  ReadRegStr $R1 ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "InstallLocation"
  ReadRegStr $R2 ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayVersion"
  ReadRegStr $R3 ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "MajorVersion"
  StrCmp $R0 "" done
  ;Compare the Major version e.g. 5.0 and 5.0. , if it is the same version we need to modify or upgrade.
  ${If} ${MAJOR_VERSION} == $R3
    ;Check the version installed, compare it to the one user is trying to install
    ${VersionCompare} $R2 ${PRODUCT_VERSION} $1 ;Version compare returns 0 if they are equal, 1 if version on the left is newer or 2 if version on the right is newer
    IntCmp $1 2 upgrade
    IntCmp $1 0 modify
    MessageBox MB_YESNO|MB_ICONQUESTION "A newer version $R2 seems to be already installed on your system.$\nWould you like to proceed with the installation of version ${PRODUCT_VERSION}?" \
        IDYES backupAndUpgrade
    Quit
    ;Run the upgrade, create a backup of the old version, install the new version and run settings updater. Once it is done ask to delete previous version?
    modify:
      StrCpy $_modifyMode "1"
      StrCpy $INSTDIR $R1 ;If we are modifying the installation, make the install location the INSTDIR
      IntCmp $1 0 done
    upgrade:
      MessageBox MB_OKCANCEL|MB_ICONEXCLAMATION "${PRODUCT_NAME} is already installed. $\n$\nClick `OK` to continue with this update." IDOK backupAndUpgrade
      Quit
    backupAndUpgrade:
      StrCpy $_upgradeMode "1"
      StrCpy $INSTDIR $R1 ;Make $INSTDIR equal to the installation path saved in the registry
      ; Backup all files and delete them
      CopyFiles "$INSTDIR" "$INSTDIR bk $R2"
      RMDir /r "$INSTDIR"
      StrCpy $backupLocation "$INSTDIR bk $R2"
      StrCpy $backupVersion $R2
    done:
  ${EndIf}
FunctionEnd

Function skipOnModify
  ${If} $_modifyMode == "1"
    Abort
  ${EndIf}
FunctionEnd

;When modifying the installer, we need to delete everything that was previously installed. In case user unchecks one of the install options
Function deleteFilesOnModify
  ${If} $_modifyMode == "1"
    RMDir "$SMPROGRAMS\${PRODUCT_NAME}"
    RMDir /r "$INSTDIR\MatlabScripts"
    RMDir /r "$INSTDIR\Modules_Native"
    RMDir /r "$INSTDIR\OTM"
    Delete "$INSTDIR\*.exe"
    Delete "$INSTDIR\*.dll"
    Delete "$INSTDIR\*.config"
    Delete "$INSTDIR\Abt.Controls.SciChart.Wpf.xml"
  ${EndIf}
FunctionEnd

Function IsDotNetInstalled
  # Check if the user has the .NET Framework 4.8 installed on their system or not

  # Set up our Variables
  Var /GLOBAL dotNET48IsThere
  Var /GLOBAL dotNET_CMD_LINE
  Var /GLOBAL EXIT_CODE

  ReadRegDWORD $dotNET48IsThere HKLM "SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full" "Release"
  IntCmp $dotNET48IsThere 528049 is_equal is_less is_greater

  is_equal:
    Goto done_compare_not_needed
  is_greater:
    # Useful if, for example, Microsoft releases .NET 4.8 SP1
    # We want to be able to simply skip install since it's not
    # needed on this system
    Goto done_compare_not_needed
  is_less:
    Goto done_compare_needed

  done_compare_needed:
    #.NET Framework 4.8 install is *NEEDED*
    # Microsoft Download Center EXE:
    # Web Bootstrapper: https://dotnet.microsoft.com/download/dotnet-framework/thank-you/net48-web-installer
    # Full Download: https://dotnet.microsoft.com/download/dotnet-framework/thank-you/net48-offline-installer

    # Reboot Required with these Exit Codes:
    # 1641 or 3010
    # Command Line Switches:
    # /showrmui /passive /norestart
    # Silent Command Line Switches:
    # /q /norestart
    # Let's see if the user is doing a Silent install or not
    IfSilent is_quiet is_not_quiet
    is_quiet:
        StrCpy $dotNET_CMD_LINE "/q /norestart"
        Goto do_local_install
    is_not_quiet:
        StrCpy $dotNET_CMD_LINE "/showrmui /passive /norestart"
        Goto do_local_install
    ;LookForLocalFile:
        ;IfFileExists "$INSTDIR\Dependencies\ndp48-web.exe" do_local_install do_network_install
        do_local_install:
            # .NET Framework found on the local disk.  Use this copy
            ExecWait '"$INSTDIR\Dependencies\ndp48-web.exe" $dotNET_CMD_LINE' $EXIT_CODE ;if the .net is updated then this name needs to update also
            Goto is_reboot_requested
        # Now, let's Download the .NET
        ;do_network_install:
            ;Var /GLOBAL dotNetDidDownload
            ;NSISdl::download "http://go.microsoft.com/fwlink/?LinkId=225704" "$TEMP\dotNET45Web.exe" $dotNetDidDownload
            ;StrCmp $dotNetDidDownload success fail
            ;success:
                ;ExecWait '"$TEMP\dotNET45Web.exe" $dotNET_CMD_LINE' $EXIT_CODE
                ;Goto is_reboot_requested
            ;fail:
                ;MessageBox MB_OK|MB_ICONEXCLAMATION "Unable to download .NET Framework.  ${PRODUCT_NAME} will be installed, but will not function without the Framework!"
                ;Goto done_dotNET_function

            # $EXIT_CODE contains the return codes.  1641 and 3010 means a Reboot has been requested
         is_reboot_requested:
            ${If} $EXIT_CODE = 1641
            ${OrIf} $EXIT_CODE = 3010
                SetRebootFlag true
            ${EndIf}
  done_compare_not_needed:
    # Done dotNET Install
    DetailPrint  ".NET 4.8 or higher is installed."
    Goto done_dotNET_function
  #exit the function
  done_dotNET_function:
FunctionEnd

Function IsVSRedistInstalled
  ${If} ${RunningX64}
    ReadRegStr $R1 HKLM "SOFTWARE\Microsoft\DevDiv\VC\Servicing\14.0\RuntimeMinimum" "Version"
    ${VersionCompare} $R1 "14.26.28720" $1 ;Version compare returns 0 if they are equal, 1 if version on the left is newer or 2 if version on the right is newer. This is the version of Redist installed.
    ${If} $1 == "2"
        ExecWait "$INSTDIR\Dependencies\VC_redist.x64.exe /passive /norestart"
        SetRebootFlag true
     ${Else}
        DetailPrint "VisualStudio DLLs to the standard package (C++) 2015, 2017, 2019 x64 are installed."
     ${EndIf}
  ${EndIf}
FunctionEnd
;---------------------------------------------------------------------------------------------------------------